

- commandes génériques : 
   un ou plusieurs paramètres
   avec paramètre d'action à appeler avec la response

=> pour les menu
=> pour le menu contextuel

   paramètres d'input: un appel en chaine

- ne garder en fichier de premier niveau que ceux qui contiennent l'API du développeur qui veut réutiliser notre plugin (pour ajouter des commandes par exemple)

- requêtes avec caractères spéciaux, exemple :
   Marche:
   > Execution of GET '/searchEntities?q=aRedgis*&_class=true'...Done

   Marche pas:
   > Execution of GET '/searchEntities?_class=true&q=aRedgis%2A'...Done
- Attention operation /rest/classOrModule/{name}/ManageReimplem : même operationId en Get et en Post. Quelle est la différence entre get et post ?
- problème avec le parse



code snippets:

sublime.active_window().set_layout({ "cols": [0.0, 0.3, 0.65, 1.0], "rows": [0.0, 0.66, 1.0], "cells": [[0, 0, 1, 1], [0, 1, 1, 2], [1, 0, 2, 1], [2, 0, 3, 1], [1, 1, 3, 2] ] })


========= App command:

import sublime_plugin

class WamNewEnvCommand(sublime_plugin.ApplicationCommand):

   def is_enabled(self):
      return True

   def is_visible(self):
      return True

   def is_checked(self):
      return False

   def description(self):
      return "Open en eWAM environment in a new workspace"

   def run(self):
      pass

========= Window command:

import sublime_plugin

class WamProjectCommand(sublime_plugin.WindowCommand):

   def is_enabled(self):
      return True

   def is_visible(self):
      return True

   def description(self):
      return "Open en eWAM environment in a new workspace"

   def run(self):
      pass


========= Text command:

import sublime_plugin

class WamProjectCommand(sublime_plugin.TextCommand):

   def is_enabled(self):
      return True

   def is_visible(self):
      return True

   def description(self):
      return "Open en eWAM environment in a new workspace"

   def want_event(self):
      pass

   def run(self, edit, event):
      pass

========= Swagger calls

api = environment.getSwaggerAPI()

print("descendants: ", api.ModuleDefAPI.ModuleDefAPI_GetDescendants(name="aFullObject").result())

print("Get: ", api.ModuleDefAPI.ModuleDefAPI_Get(name="aRedgisTest").result())

print("api", locals()['api'])

moduleAPI = getattr(locals()['api'], 'ModuleDefAPI')
print("attr:", moduleAPI)

method = getattr(moduleAPI, 'ModuleDefAPI_Get')
print(method)

kwargs = {'name': "aRedgisTest"}
print(method(**kwargs).result())


========== Regex


""" Replaces any "<<method_name>>" string by the string value returned by the call to method_name
"""
def ExpandTags(stringToExpand):

   tagRegex = re.compile(r"<<[a-zA-Z0-9_]+>>")

   start = 0
   expandedString = ""

   match = tagRegex.search(stringToExpand)
   while match != None:
      methodName = stringToExpand[start+match.start()+2:start+match.end()-2]

      if methodName not in globals():
         message = "Ignoring token {" + methodName + "} : method '" + methodName + "' couldn't be found. [" + __name__ + " : " + sys._getframe().f_code.co_name + "]"
         print("Gold Plugin Error: " + message)
         sublime.error_message(message)
         expandedString = expandedString + stringToExpand[start:start+match.end()]

      else:
         method = globals()[methodName]
         sustitution = method()
         expandedString = expandedString + stringToExpand[start:start+match.start()] + sustitution

      # match = tagRegex.search(expandedString)
      start = start = start+match.end()
      match = tagRegex.search(stringToExpand[start:])

   expandedString = expandedString + stringToExpand[start:]

   return expandedString

